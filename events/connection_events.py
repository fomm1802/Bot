import discord
from discord.ext import commands
import logging
import asyncio
from datetime import datetime

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

class Events(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.start_time = None
        self.status_task = None

    @commands.Cog.listener()
    async def on_ready(self):
        if not self.start_time:
            self.start_time = datetime.now()
            logging.info(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ {self.bot.user}")
            
            if not self.status_task:
                self.status_task = self.bot.loop.create_task(self.update_status())

    @commands.Cog.listener()
    async def on_disconnect():
        logging.warning("‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!")

    @commands.Cog.listener()
    async def on_resumed():
        logging.info("‚úÖ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß!")

    async def update_status(self):
        while not self.bot.is_closed():
            try:
                uptime = datetime.now() - self.start_time
                hours = uptime.total_seconds() // 3600
                
                await self.bot.change_presence(
                    activity=discord.Activity(
                        type=discord.ActivityType.watching,
                        name=f"üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå {int(hours)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
                    )
                )
            except Exception as e:
                logging.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: {e}")
            await asyncio.sleep(60)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ

async def setup(bot):
    await bot.add_cog(Events(bot))
