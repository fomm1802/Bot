import discord
from discord.ext import commands, tasks
import asyncio
import json
import os
import logging
from dotenv import load_dotenv
import time
import base64
import requests

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config.json
def load_config():
    try:
        with open("config.json", "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        raise Exception("‡πÑ‡∏ü‡∏•‡πå config.json ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

config = load_config()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents
intents = discord.Intents.all()
bot = commands.Bot(command_prefix=config["prefix"], intents=intents)
bot.config = config
start_time = time.time()

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ uptime
def get_uptime():
    uptime_seconds = int(time.time() - start_time)
    return f"{uptime_seconds // 3600}h {(uptime_seconds % 3600) // 60}m {uptime_seconds % 60}s"

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
@tasks.loop(seconds=5)
async def update_presence():
    await bot.change_presence(activity=discord.Game(name=f"Online for {get_uptime()}"))

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
def get_server_config(guild_id):
    path = f"configs/{guild_id}.json"
    if os.path.exists(path):
        try:
            with open(path, "r") as file:
                return json.load(file)
        except json.JSONDecodeError:
            logging.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {guild_id}.json ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
    return {"notify_channel_id": None}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GitHub
def check_if_file_exists_on_github(guild_id):
    url = f"https://api.github.com/repos/fomm1802/Bot/contents/configs/{guild_id}.json"
    headers = {"Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"}
    return requests.get(url, headers=headers).status_code == 200

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏•‡∏á GitHub
def save_server_config_to_github(guild_id, server_config):
    url = f"https://api.github.com/repos/fomm1802/Bot/contents/configs/{guild_id}.json"
    headers = {"Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"}
    response = requests.get(url, headers=headers)
    sha = response.json().get('sha') if response.status_code == 200 else None
    data = {
        "message": f"Update config for guild {guild_id}",
        "content": base64.b64encode(json.dumps(server_config, indent=4).encode()).decode(),
        "branch": "main",
        "sha": sha
    }
    res = requests.put(url, headers=headers, json=data)
    logging.info(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if res.status_code in (200, 201) else f"‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {res.text}")

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
def save_server_config(guild_id, server_config):
    save_server_config_to_github(guild_id, server_config)
    path = f"configs/{guild_id}.json"
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w") as file:
        json.dump(server_config, file, indent=4)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
@bot.command(name='set_notify_channel')
@commands.has_permissions(administrator=True)
async def set_notify_channel(ctx):
    guild_id, channel_id = ctx.guild.id, ctx.channel.id
    server_config = get_server_config(guild_id)
    if check_if_file_exists_on_github(guild_id):
        logging.info(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {guild_id}.json ‡πÉ‡∏ô GitHub")
    else:
        logging.info(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå {guild_id}.json ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
    
    if server_config['notify_channel_id'] == channel_id:
        return await ctx.send(f"üîî ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: <#{channel_id}>")
    
    server_config['notify_channel_id'] = channel_id
    save_server_config(guild_id, server_config)
    await ctx.send(f"üîî ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: <#{channel_id}>")

# ‡πÇ‡∏´‡∏•‡∏î Extensions ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå events/
async def load_extensions():
    # ‡πÇ‡∏´‡∏•‡∏î Events
    events_path = "events"
    for filename in os.listdir(events_path):
        if filename.endswith(".py"):
            ext = f"events.{filename[:-3]}"
            try:
                await bot.load_extension(ext)
                logging.info(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {ext} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            except Exception as e:
                logging.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î {ext} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

    # ‡πÇ‡∏´‡∏•‡∏î Commands
    commands_path = "commands"
    for filename in os.listdir(commands_path):
        if filename.endswith(".py"):
            ext = f"commands.{filename[:-3]}"
            try:
                await bot.load_extension(ext)
                logging.info(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {ext} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            except Exception as e:
                logging.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î {ext} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

@bot.event
async def on_ready():
    logging.info(f"Bot is online as {bot.user}")
    update_presence.start()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async def main():
    load_dotenv()
    await load_extensions()
    await bot.start(os.getenv("BOT_TOKEN"))

if __name__ == "__main__":
    asyncio.run(main())
